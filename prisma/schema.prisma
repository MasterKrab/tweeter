generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  created_at         Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  image         String?
  name          String
  email         String        @unique
  emailVerified DateTime?     @map("email_verified")
  bio           String?
  cover         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  followers     Follower[]    @relation("followed")
  following     Follower[]    @relation("follower")
  tweets        Tweet[]
  comments      Comment[]
  reTweets      ReTweet[]
  likes         Like[]
  bookmarks     Bookmark[]
  commentsLikes CommentLike[]

  Account Account[]
  Session Session[]
  @@map(name: "users")
}

model Follower {
  id         String @id @default(cuid())
  followed   User   @relation("followed", fields: [followedId], references: [id], onDelete: Cascade)
  followedId String
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  @@unique([followerId, followedId])
}

model Tweet {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  content         String
  mediaUrl        String?
  mediaWidth      Int?
  mediaHeight     Int?
  replyPermission ReplyPermission @default(everyone)
  createdAt       DateTime        @default(now())
  comments        Comment[]
  reTweets        ReTweet[]
  likes           Like[]
  bookmarks       Bookmark[]
  hashtags        Hashtag[]
}

model ReTweet {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   String
  createdAt DateTime @default(now())

  @@unique([userId, tweetId])
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   String
  createdAt DateTime @default(now())

  @@unique([userId, tweetId])
}

model Bookmark {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   String
  createdAt DateTime @default(now())

  @@unique([userId, tweetId])
}

model Comment {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tweet       Tweet         @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId     String
  content     String
  mediaUrl    String?
  mediaWidth  Int?
  mediaHeight Int?
  createdAt   DateTime      @default(now())
  likes       CommentLike[]
}

model CommentLike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Hashtag {
  id      String @id @default(cuid())
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId String
  name    String
}

enum ReplyPermission {
  everyone
  following
}
